#!/usr/bin/env python3

import logging, re, sys, signal, getopt
from hackeriet import mqtt
import json, http.client
from matrix_client.client import MatrixClient
from matrix_client.api import MatrixRequestError

try:
    opts, args = getopt.getopt(sys.argv[1:], "u:p:d", ["user=", "pass="])
except getopt.GetoptError as err:
    print(err)

loglvl = logging.INFO
MATRIX_USER = None
MATRIX_PASS = None

for o, a in opts:
    if o == "-d":
        loglvl = logging.DEBUG
    elif o in ("-u", "--user="):
        MATRIX_USER = a
    elif o in ("-p", "--pass="):
        MATRIX_PASS = a

assert MATRIX_USER, "Username required"
assert MATRIX_PASS, "Password required"

MATRIX_URL = "https://matrix.hackeriet.no:8448"
MATRIX_ROOM = "#hackeriet:hackeriet.no"
MSG_MAX_AGE = 30000

def sigint_handler(signal, frame):
    print('Interrupted')
    sys.exit(0)
signal.signal(signal.SIGINT, sigint_handler)

logger = logging.getLogger('matrixbridge')
logger.addHandler(logging.StreamHandler(sys.stdout))
logger.setLevel(logging.INFO)

commands={} # IRC triggers
events={} # MQTT events
humla_open = False

def matrix_setup():
    global client, room
    client = MatrixClient(MATRIX_URL)
    token = client.login_with_password(username=MATRIX_USER,password=MATRIX_PASS)
    room = client.join_room(MATRIX_ROOM)
    room.add_listener(msg_handler)

def mqtt_event(mosq, obj, msg):
    logger.info('MQTT: {} {}'.format(msg.topic, msg.payload))
    if msg.topic in events:
        events[msg.topic](msg.payload)

def msg_handler(c):
    logger.debug(c)
    if 'content' in c and 'msgtype' in c['content'] and c['content']['msgtype'] == 'm.text':
        if c['age'] > MSG_MAX_AGE:
            return
        sender = c['sender']
        body = c['content']['body']
        logger.info('{}: {}'.format(sender, body))
        cmd, content = get_command(body)
        if cmd and cmd in commands:
            commands[cmd](sender, content, c)

def get_command(msg):
    m = re.search('^!(\w*) ?(.*)?', msg)
    if m:
        return m.groups()
    return ('', '')

def run():
    mqtt.subscribe("hackeriet/#", 0)
    mqtt.on_message = mqtt_event
    matrix_setup()
    client.listen_forever()

def add_command(trigger, func):
    commands.update({trigger: func})

def add_event(trigger, func):
    events.update({trigger: func})

def notice(msg):
    room.send_notice(msg)

# Matrix handler helpers

def mqtt_send(sender, content, c):
    if len(content) < 1:
        return
    if not " " in content:
        content += " "
    cmd, rest = content.split(" ", 1)
    print("mqtt send: {} / {} ".format(cmd, rest))
    mqtt(cmd, rest)

add_command('mqtt', mqtt_send)

# MQTT handlers
def ding_event(msg):
    if msg:
        notice("DING DONG from {}".format(msg))
    else:
        notice("DING DONG")
add_event('hackeriet/ding', ding_event)

def humla_event(msg):
    global humla_state
    room.update_room_topic()
    print("Topic: " + room.topic)
    if room.topic is None:
        room.topic = ""
    new_topic = re.sub(r'(The space is:) \w*\. \| (.*)', '\g<1> ' + msg + '. | \g<2>', room.topic)
    print("New Topic: " + new_topic)
    if new_topic != room.topic:
        print("update")
    room.topic = new_topic
    client.api.send_state_event(room.room_id, "m.room.topic", {"topic": new_topic})

    humla_open = True if msg is "OPEN" else False
add_event('hackeriet/space_state', humla_event)

def door_sensor_event(msg):
    if not humla_open:
        notice("Door {}".format(msg))
add_event('hackeriet/door_sensor', door_sensor_event)


run()
